# Copyright 2022 Stefano Cottafavi <stefano.cottafavi@gmail.com>.
# SPDX-License-Identifier: GPL-2.0-only

name: 'Publish KiCad addon'
description: 'Publish a KiCad addon to the official metadata repository'

branding:
  icon: 'box'
  color: 'yellow'
  
inputs:
  # addon metadata (https://dev-docs.kicad.org/en/addons/)
  name:
    description: Addon name
    default: ${{github.event.repository.name}}
  desc:
    description: "Addon description (short)"
    default: ""
  desc_full:
    description: "Addon description (full)"
    default: ""
  identifier:
    description: "Addon identifier"
    default: "com.github.${{github.actor}}.${{github.event.repository.name}}"
  type:
    description: Addon (plugin, library, colortheme)
    default: "plugin"
  author_name: 
    description: Addon author
    default: "${{github.actor}}"
  maintainer_name: 
    description: Addon maintainer
    default: "${{github.actor}}"
  license:
    description: Addon license
    default: "GPL-2.0"
  version:
    description: Addon version number
    default: ""
  kicad_version:
    description: KiCad version number
    default: "6.0"
  status:
    description: Addon status (stable, testing, development, deprecated, invalid)
    default: "stable"

  # actions parameters
  files:
    description: 'Plugin files (to move into "plugins" folder)'
    default: '*.py *.png'
  icon:
    description: 'Icon file'
    default: 'assets/icon.png'
  deploy:
    description: Deploy to KiCad repository
    default: false
  gitlab_user:
    description: 'GitLab username'
    default: "${{github.actor}}"
  gitlab_email:
    description: 'GitLab user email'
    default: "${{github.actor}}@users.noreply.github.com"
  gitlab_token:
    description: 'GitLab token secret'
    default: ""
  gitlab_branch:
    description: 'GitLab branch'
    default: "${{ github.event.repository.name }}"
  gitlab_folder:
    description: 'GitLab folder'
    default: "com.github.${{github.actor}}.${{github.event.repository.name}}"
  
runs:
  using: 'composite'
  steps:
    - name: Set environment
      run: |
        echo "PACKAGE_NAME=${{ github.event.repository.name }}-pcm.zip" >> $GITHUB_ENV
      shell: bash

    - name: Checkout repository
      uses: actions/checkout@v3
    
    
    # Release (local stuff)
    - name: Prepare metadata file
      # fill in root elements, then author, resources and versions
      run: |
        tmp=$(mktemp)
        jq '.name="${{inputs.name}}" | .description="${{inputs.desc}}" | .description_full="${{inputs.desc_full}}" | .identifier="${{inputs.identifier}}" | .type="${{inputs.type}}" | .license="${{inputs.license}}" | .author.name="${{inputs.author_name}}" | .author.contact.web="${{github.server_url}}/${{github.repository}}" | .maintainer.name="${{inputs.maintainer_name}}" | .maintainer.contact.web="${{github.server_url}}/${{github.repository}}" | .resources.homepage="${{github.server_url}}/${{github.repository}}" | .versions[0].version="${{inputs.version}}" | .versions[0].status="${{inputs.status}}" | .versions[0].kicad_version="${{inputs.kicad_version}}" | .versions[0].download_url="${{github.server_url}}/${{github.repository}}/releases/download/v${{inputs.version}}/${{env.PACKAGE_NAME}}"' metadata.json > "$tmp"
        mv "$tmp" metadata.json
      shell: bash

    - name: Prepare and zip folders
      run: |
        mkdir plugins resources
        mv ${{inputs.files}} plugins
        mv ${{inputs.icon}} resources
        zip -r ${{env.PACKAGE_NAME}} plugins resources metadata.json
      shell: bash

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{inputs.version}}"
        files: |
          ${{env.PACKAGE_NAME}}
          metadata.json


    # Deploy (remote stuff)
    - name: Get statistics
      if: inputs.deploy == 'true'
      run: |
        echo "FILE_SHA=$(shasum -a 256 ${{env.PACKAGE_NAME}} | cut -d ' ' -f1)" >> $GITHUB_ENV
        echo "FILE_SIZE=$(wc -c < ${{env.PACKAGE_NAME}})" >> $GITHUB_ENV
        echo "FILE_SIZE_UC=$(unzip -l ${{env.PACKAGE_NAME}} | tail -1 | xargs | cut -d ' ' -f1)" >> $GITHUB_ENV
      shell: bash

    - name: Update metadata (for metadata repository)
      if: inputs.deploy == 'true'
      run: |
        tmp=$(mktemp)
        jq '.versions[0].download_sha256="${{env.FILE_SHA}}" | .versions[0].download_size=${{env.FILE_SIZE}} | .versions[0].install_size=${{env.FILE_SIZE_UC}}' metadata.json > "$tmp"
        mv "$tmp" metadata.json
      shell: bash

    # see MR: https://docs.gitlab.com/ee/user/project/push_options.html
    # -o merge_request.create -o merge_request.remove_source_branch -o merge_request.assign="github"
    # git checkout -b ${{inputs.gitlab_branch}}
    - name: Push to GitLab repository
      if: inputs.deploy == 'true'
      run: |
        git clone https://github:${{inputs.gitlab_token}}@gitlab.com/${{inputs.gitlab_user}}/metadata.git --branch ${{inputs.gitlab_branch}}
        cd metadata
        mkdir -p packages/${{inputs.gitlab_folder}}
        cp ../metadata.json packages/${{inputs.gitlab_folder}}
        git config user.name "${{inputs.gitlab_user}}"
        git config user.email "${{inputs.gitlab_email}}"
        git commit -am "updated metadata.json"
        git push origin @
      shell: bash
